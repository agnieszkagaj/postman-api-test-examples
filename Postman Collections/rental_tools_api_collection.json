{
	"info": {
		"_postman_id": "010046ab-ab07-4310-bfe1-22a5ce6c95ba",
		"name": "Rental Tools",
		"description": "Source documentation:\n\n[https://github.com/vdespa/quick-introduction-to-postman/blob/main/simple-tool-rental-api.md](https://github.com/vdespa/quick-introduction-to-postman/blob/main/simple-tool-rental-api.md)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3eb6f69-6a82-41cf-9c65-1e0e56296e80",
								"exec": [
									"// Clears the console before running the script.\r",
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2c612c7e-d866-461d-9a4c-e5c0035d7ca0",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"let bodyText = \"{\\\"status\\\":\\\"UP\\\"}\" // Expected text in response body\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Property status is a string\", function (){\r",
									"    pm.expect(response.status).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has a matching text\", function(){\r",
									"    pm.expect(pm.response.text()).to.include(bodyText)\r",
									"});\r",
									"\r",
									"pm.test(\"Corrrect header for x-powered-by\", function(){\r",
									"    pm.expect(pm.response.headers.get(\"x-powered-by\")).to.equal(\"Express\");\r",
									"});\r",
									"\r",
									"pm.test(\"Corrrect header for connection\", function(){\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.equal(\"keep-alive\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "71809476-f5e4-49e3-b5db-d94386f25871",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/status"
					},
					"response": []
				}
			],
			"id": "2a3adcf1-299b-4886-a1c6-eb976d7d08d4"
		},
		{
			"name": "API Auth",
			"item": [
				{
					"name": "Register a new API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78c84db0-908e-4e09-9dae-86466d04a0aa",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONFIG. FOR API TOKEN: \r",
									"// automatically extracts accessToken from the response body and assigns it to the variable \"accessToken\"\r",
									"\r",
									"pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response body is not empty', function () {\r",
									"    pm.expect(response).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('Response body contains accessToken', function () {\r",
									"    pm.expect(response).to.have.property('accessToken');\r",
									"});\r",
									"\r",
									"pm.test('Property accessToken is a string', function () {\r",
									"    pm.expect(response.accessToken).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38aa2492-cabb-44e3-afe7-e7bf65cab281",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b3875a06-e9b2-486b-acde-683f8c7f8304",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"{{$randomFullName}}\",\r\n   \"clientEmail\": \"{{$randomExampleEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api-clients"
					},
					"response": []
				}
			],
			"id": "cf701446-c3e6-4fee-abc3-5eb00123596a"
		},
		{
			"name": "Products - tools",
			"item": [
				{
					"name": "Get all tools",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c022a46c-38df-42f0-b18c-b7af18ce2769",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54c0b84b-554b-4f58-9718-76eb73b5f1ec",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONSOLE LOG REQUESTS - only for debugging purposes:\r",
									"\r",
									"console.log(\"Full response body (all products): \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.length.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"All 20 products are present\", function () {\r",
									"    pm.expect(response).to.have.length(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid - products contain all the required info\", function() {\r",
									"    const schema = {\r",
									"        type: \"array\",\r",
									"        items: {\r",
									"            $ref: \"#/definitions/MyObject\"\r",
									"        },\r",
									"        definitions: {\r",
									"            MyObject: {\r",
									"                type: \"object\",\r",
									"                required: [\"id\", \"category\", \"name\", \"inStock\"],\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"integer\"\r",
									"                    },\r",
									"                    category: {\r",
									"                        type: \"string\"\r",
									"                    },\r",
									"                    name: {\r",
									"                        type: \"string\"\r",
									"                    },\r",
									"                    inStock: {\r",
									"                        type: \"boolean\"\r",
									"                    }\r",
									"                },\r",
									"                \"additionalProperties\": false\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct ID property format\", function () {\r",
									"    response.forEach(item => {\r",
									"        pm.expect(item.id).to.be.a('number');\r",
									"        pm.expect(item.id.toString().length).to.equal(4);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"No duplicate IDs\", function () {\r",
									"    const ids = response.map(item => item.id);\r",
									"    const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);\r",
									"    \r",
									"    if(duplicates.length > 0) {\r",
									"        console.log(\"Found ID duplicates: \" + duplicates.join(\", \"))\r",
									"    };\r",
									"\r",
									"    pm.expect(duplicates).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"No duplicate names\", function () {\r",
									"    const names = response.map(item => item.name.trim().toLowerCase());\r",
									"    const duplicates = names.filter((name, index) => names.indexOf(name) !== index);\r",
									"\r",
									"    if(duplicates.length > 0) {\r",
									"        console.log(\"Found name duplicates: \" + duplicates.join(\", \"))\r",
									"    };\r",
									"\r",
									"    pm.expect(duplicates).to.be.empty;    \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e4bf4014-4942-4293-bb81-8ff0b4353260",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tools",
							"host": [
								"{{url}}"
							],
							"path": [
								"tools"
							],
							"query": [
								{
									"key": "category",
									"value": "plumbing",
									"type": "text",
									"disabled": true
								},
								{
									"key": "results",
									"value": "2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true",
									"type": "text",
									"disabled": true
								},
								{
									"key": "available",
									"value": "false",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"id": "6dd2fc5b-abcd-45c2-b161-92a51fcd17c1",
							"name": "Get all tools",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/tools",
									"host": [
										"{{url}}"
									],
									"path": [
										"tools"
									],
									"query": [
										{
											"key": "category",
											"value": "plumbing",
											"type": "text",
											"disabled": true
										},
										{
											"key": "results",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "available",
											"value": "true",
											"type": "text",
											"disabled": true
										},
										{
											"key": "available",
											"value": "false",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "1870"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "etag",
									"value": "W/\"74e-C4T5fkNjqxDCjiTeVg/tAE2nylc\""
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Thu, 12 Jun 2025 18:34:42 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510027-SOF, cache-sof1510027-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0"
								},
								{
									"key": "X-Timer",
									"value": "S1749753282.070978,VS0,VE248"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "[\n    {\n        \"id\": 4643,\n        \"category\": \"plumbing\",\n        \"name\": \"PEX Clamp Tool\",\n        \"inStock\": true,\n        \"newInfo\": true       \n    },\n    {\n        \n        \"category\": \"power-tools\",\n        \"name\": \"1/2 in. Brushless Hammer Drill\",\n        \"inStock\": true\n    },\n    {\n        \"id\": \"2177\",\n        \"category\": \"ladders\",\n        \"name\": \"Cosco Three Step Steel Platform\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 6543,\n        \"category\": \"electric-generators\",\n        \"name\": \"GENMAX 3200 Watt Inverter Generator\",\n        \"inStock\": false\n    },\n    {\n        \"id\": 3674,\n        \"category\": \"power-tools\",\n        \"name\": \"20V Max Cordless Drill Combo Kit\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 6544,\n        \"category\": \"power-tools\",\n        \"name\": \"GENMAX 3200 Watt Inverter Generator\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5851,\n        \"category\": \"power-tools\",\n        \"name\": \"20V MAX Cordless Drill Combo Kit\",\n        \"inStock\": false\n    },\n    {\n        \"id\": 8739,\n        \"category\": \"power-tools\",\n        \"name\": \"18V LXT Lithium-Ion Cordless 8-Pc. Combo Kit\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 1709,\n        \"category\": \"ladders\",\n        \"name\": \"Velocity Aluminum Multi-Position Ladder, 13 Ft, 300 lbs\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 1705,\n        \"category\": \"ladders\",\n        \"name\": \"Werner 356 Stepladder, 6-Foot, 100 lbs\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 7395,\n        \"category\": \"ladders\",\n        \"name\": \"Louisville Fiberglass Stepladder, 4 Ft, 300 lbs\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 8554,\n        \"category\": \"trailers\",\n        \"name\": \"Tilt Trailer 7,000 lbs.\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 8753,\n        \"category\": \"plumbing\",\n        \"name\": \"Pipe Threader\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 9482,\n        \"category\": \"plumbing\",\n        \"name\": \"Submersible Water Removal Pump\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5477,\n        \"category\": \"plumbing\",\n        \"name\": \"Manual Drain Auger 25ft\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 6483,\n        \"category\": \"trailers\",\n        \"name\": \"Single Axle Dump Trailer 2,990 lbs\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5774,\n        \"category\": \"trailers\",\n        \"name\": \"Single Axle Utility Trailer 4,995 lbs.\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 4875,\n        \"category\": \"electric-generators\",\n        \"name\": \"2800 Watt Inverter Generator\",\n        \"inStock\": true\n    },\n    {\n        \"id\": 5499,\n        \"category\": \"electric-generators\",\n        \"name\": \"3000 Watt Inverter Generator\",\n        \"inStock\": true\n    }\n]"
						}
					]
				},
				{
					"name": "Get a single tool",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53318066-6b67-43db-b1f7-d93c7bf1728b",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4487324b-e3b6-43da-a211-9b7c23b79dd5",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONSOLE LOG REQUESTS - only for debugging purposes:\r",
									"\r",
									"console.log(\"Full response body (searched product): \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"let inStockResponse = response.inStock;\r",
									"\r",
									"let currentStockResponse = response[\"current-stock\"];\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid - product contains all the required info\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        // Property \"user-manual\" is optional - add to \"required\" if needed\r",
									"        required: [\"id\", \"category\", \"name\", \"manufacturer\", \"price\", \"current-stock\", \"inStock\"],\r",
									"        properties: {\r",
									"            id: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            category: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            name: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            manufacturer: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            price: {\r",
									"                type: \"number\"\r",
									"            },\r",
									"            ['current-stock']: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            inStock: {\r",
									"                type: \"boolean\"\r",
									"            },                \r",
									"            ['user-manual']: {\r",
									"                type: \"string\"\r",
									"            }                    \r",
									"        },\r",
									"        \"additionalProperties\": false     \r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Matching product ID\", function () {\r",
									"    pm.expect(response.id).to.eql(parseInt(pm.collectionVariables.get(\"availableProductID\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Price is greater than 0\", function () { \r",
									"    pm.expect(response.price).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Relation between product availability and stock number is consistent\", function(){\r",
									"let consistentAvailabilityAndStock =\r",
									"        (inStockResponse === true && currentStockResponse > 0) ||\r",
									"        (inStockResponse === false && currentStockResponse === 0);\r",
									"    pm.expect(consistentAvailabilityAndStock).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2c0e6a01-c9f6-44cd-bfd9-5b3dd57a9acd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tools/:toolId?user-manual=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"tools",
								":toolId"
							],
							"query": [
								{
									"key": "user-manual",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "toolId",
									"value": "{{availableProductID}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e4a41273-18e4-428b-b1a8-a6495e4bcffa",
							"name": "Get a single tool",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/tools/:toolId?user-manual=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tools",
										":toolId"
									],
									"query": [
										{
											"key": "user-manual",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "toolId",
											"value": "{{availableProductID}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "17876"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "etag",
									"value": "W/\"45d4-Hkhg3P8UIxsqfO0Jk210H1uaiMY\""
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Thu, 12 Jun 2025 22:04:31 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-cph2320055-CPH, cache-cph2320055-CPH"
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0"
								},
								{
									"key": "X-Timer",
									"value": "S1749765872.527205,VS0,VE121"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"randomTest\": 3674,\n    \"category\": \"power-tools\",\n    \"name\": \"20V Max Cordless Drill Combo Kit\",\n    \"manufacturer\": \"DEWALT\",\n    \"price\": 10.96,\n    \"current-stock\": 0,\n    \"inStock\": true,\n    \"user-manual\": \"data:@file/pdf;base64,\"\n}"
						}
					]
				}
			],
			"id": "bafcd4ef-ac43-4ed2-932f-c057d0eb23c1"
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create a new order - fail (not in stock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a091d650-c700-4717-9759-4398f8d96a15",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONFIG. FOR ORDER ID: \r",
									"// automatically extracts orderID from the response body and assigns it to the variable \"orderID\"\r",
									"// FYI: Left in in case of debugging (i.e. unavailable product becomes available)\r",
									"pm.collectionVariables.set(\"orderId\", pm.response.json().orderId);\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"const errorMessage = \"This tool is not in stock and cannot be ordered.\";\r",
									"\r",
									"// Correct error message in response body:\r",
									"// \"error\": \"This tool is not in stock and cannot be ordered.\"\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Correct error message - order not created, product not in stock', function () {\r",
									"\r",
									"    if(response.error !== errorMessage) {\r",
									"    console.log(\"Incorrect response. Found: \");\r",
									"    console.log(pm.response.json());\r",
									"    };\r",
									"\r",
									"    pm.expect(response).to.have.property('error');\r",
									"\r",
									"    pm.expect(response.error).to.be.a(\"string\");\r",
									"\r",
									"    pm.expect(response.error).to.equal(errorMessage);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9266fca-ea92-4b23-a6a7-9743dc0732bf",
								"exec": [
									"console.clear();\r",
									"pm.collectionVariables.set(\"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"pm.collectionVariables.set(\"orderComment\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a40383ef-6ca3-4718-b288-3d12557e6f85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"toolId\": {{unavailableProductID}},\r\n \"customerName\": \"{{customerName}}\",\r\n \"comment\": \"{{orderComment}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/orders"
					},
					"response": []
				},
				{
					"name": "Create a new order - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a091d650-c700-4717-9759-4398f8d96a15",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONFIG. FOR ORDER ID: \r",
									"// automatically extracts orderID from the response body and assigns it to the variable \"orderID\"\r",
									"pm.collectionVariables.set(\"orderId\", pm.response.json().orderId);\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"let requiredResponseOrderInfo = [\"created\", \"orderId\"];\r",
									"\r",
									"// Correct response body example:\r",
									"/*\r",
									"{\r",
									"    \"created\": true,\r",
									"    \"orderId\": \"eT4cVVYCrk9OqLZemOLpV\"\r",
									"}\r",
									"*/\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Order created successfully', function () {\r",
									"\r",
									"    // For debugging purposes - if product becomes unavailable, prints response body in console\r",
									"    if(!response.hasOwnProperty(\"created\")) {\r",
									"    console.log(\"Incorrect response. Found: \");\r",
									"    console.log(pm.response.json());\r",
									"    };\r",
									"    \r",
									"    pm.expect(pm.response.json().created).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Order information is correct\", function () {\r",
									"\r",
									"    // All product info present\r",
									"    requiredResponseOrderInfo.forEach(responseOrderInfo => {\r",
									"        pm.expect(response).to.have.property(responseOrderInfo);\r",
									"    });\r",
									"\r",
									"    pm.expect(response.created).to.be.a(\"boolean\");\r",
									"\r",
									"    pm.expect(response.orderId).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9266fca-ea92-4b23-a6a7-9743dc0732bf",
								"exec": [
									"console.clear();\r",
									"pm.collectionVariables.set(\"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"pm.collectionVariables.set(\"orderComment\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "20c73e67-6848-41ed-aa1e-0fce7fc94aa2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"toolId\": {{availableProductID}},\r\n \"customerName\": \"{{customerName}}\",\r\n \"comment\": \"{{orderComment}}\"\r\n}\r\n\r\n// Errors:\r\n// - cannot change the quantity\r\n// - cannot order 2 different products at once",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/orders"
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b83988c3-3874-450a-9408-edca5c383272",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"// For alternative schema validation - left in for possible future use\r",
									"/*\r",
									"let requiredOrderInfo = [\"id\", \"toolId\", \"customerName\", \"createdBy\", \"quantity\", \"created\", \"timestamp\", \"processed\", \"comment\", \"invoice\"];\r",
									"\r",
									"let requiredStringInfo = [\"id\", \"customerName\", \"createdBy\", \"created\", \"comment\", \"invoice\"];\r",
									"\r",
									"let requiredIntInfo = [\"toolId\", \"quantity\", \"timestamp\"];\r",
									"*/\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid - order contains all the required info\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        // Properties \"comment\" & \"invoice\" are optional - add to \"required\" if needed\r",
									"        required: [\"id\", \"toolId\", \"customerName\", \"createdBy\", \"quantity\", \"created\", \"timestamp\", \"processed\"],\r",
									"        properties: {\r",
									"            id: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            toolId: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            customerName: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            createdBy: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            quantity: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            created: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            timestamp: {\r",
									"                type: \"integer\"\r",
									"            },                \r",
									"            processed: {\r",
									"                type: \"boolean\"\r",
									"            },\r",
									"            comment: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            invoice: {\r",
									"                type: \"string\"\r",
									"            }                    \r",
									"        },\r",
									"        \"additionalProperties\": false     \r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Alternative test for schema validation - not valid for verifying additional properties (left in for possible future use)\r",
									"/*\r",
									"pm.test(\"Schema is valid - order contains all the required info\", function () {\r",
									"      \r",
									"    // All order info present\r",
									"    requiredOrderInfo.forEach(orderInfo => {\r",
									"        pm.expect(response).to.have.property(orderInfo)});\r",
									"\r",
									"    // Appropriate properties = string\r",
									"    requiredStringInfo.forEach(stringInfo => {\r",
									"        pm.expect(response[stringInfo]).to.be.a(\"string\")});\r",
									"\r",
									"    // Appropriate properties = int\r",
									"    requiredIntInfo.forEach(intInfo => {\r",
									"        pm.expect(response[intInfo]).to.be.a(\"number\")});\r",
									"\r",
									"    // Property \"processed\" is a boolean\r",
									"    pm.expect(response.processed).to.be.a(\"boolean\");\r",
									"\r",
									"    // Property \"processed\" is false\r",
									"    pm.expect(response.processed).to.be.false;\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"pm.test('Order is not yet processed', function() {\r",
									"    pm.expect(response.processed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test('Matching info from POST request - Create a new order', function() {\r",
									"\r",
									"    pm.expect(response.toolId).to.eql(parseInt(pm.collectionVariables.get('availableProductID')));\r",
									"\r",
									"    pm.expect(response.customerName).to.eql(pm.collectionVariables.get('customerName'));\r",
									"\r",
									"    pm.expect(response.comment).to.eql(pm.collectionVariables.get('orderComment'));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1511f300-43e5-4b18-ba75-d06205c44689",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "27dfe630-ff4e-490a-9c4a-e4f3700b9f5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/:orderId?invoice=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "invoice",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e6d3406-b4a3-40e8-b17d-3179f4499e3d",
								"exec": [
									"console.clear();\r",
									"pm.collectionVariables.set(\"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"// pm.collectionVariables.set(\"orderComment\", pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd553872-a0a8-435b-8b46-aa06dabfadaf",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// FYI:\r",
									"// 1. TEST \"Response body is JSON\" SHOULD FAIL\r",
									"// 2. RESPONSE BODY IS EMPTY (due to 204 status code)\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Empty response body + previous test fails: Response body is JSON \", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(''); // To check if the response body is empty    \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4f495ef6-d782-43e1-b741-72bb51e68f3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"customerName\": \"{{customerName}}\"\r\n // , \"comment\": \"{{orderComment}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/orders/:orderId",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order - after Patch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c72365c-bacd-49c8-843b-82e2297d939c",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b195e6ce-d74d-4caf-8c29-82bcf772f1c2",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"const response = pm.response.json(); // Added this line to get the response object\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid - order contains all the required info\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        // Properties \"comment\" & \"invoice\" are optional - add to \"required\" if needed\r",
									"        required: [\"id\", \"toolId\", \"customerName\", \"createdBy\", \"quantity\", \"created\", \"timestamp\", \"processed\"],\r",
									"        properties: {\r",
									"            id: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            toolId: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            customerName: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            createdBy: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            quantity: {\r",
									"                type: \"integer\"\r",
									"            },\r",
									"            created: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            timestamp: {\r",
									"                type: \"integer\"\r",
									"            },                \r",
									"            processed: {\r",
									"                type: \"boolean\"\r",
									"            },\r",
									"            comment: {\r",
									"                type: \"string\"\r",
									"            },\r",
									"            invoice: {\r",
									"                type: \"string\"\r",
									"            }                    \r",
									"        },\r",
									"        \"additionalProperties\": false     \r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test('Order is not yet processed', function() {\r",
									"    pm.expect(response.processed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test('Order updated correctly', function() {\r",
									"\r",
									"    pm.expect(response.toolId).to.eql(parseInt(pm.collectionVariables.get('availableProductID')));\r",
									"\r",
									"    pm.expect(response.customerName).to.eql(pm.collectionVariables.get('customerName'));\r",
									"\r",
									"    pm.expect(response.comment).to.eql(pm.collectionVariables.get('orderComment'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2f04e2be-16d4-445f-8cdf-874d6c6643d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/:orderId?invoice=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "invoice",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f21ee0bf-03a0-45cb-80b6-adf610b268d9",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b534fd3a-fb4e-48fe-85aa-8569eb0096be",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// FYI:\r",
									"// 1. TEST \"Response body is JSON\" SHOULD FAIL\r",
									"// 2. RESPONSE BODY IS EMPTY (due to 204 status code)\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Empty response body + previous test fails: Response body is JSON \", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(''); // To check if the response body is empty    \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "88285429-4590-44f1-bb09-cb0057f5113d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/orders/:orderId",
							"host": [
								"{{url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders - order deleted successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e36fe0d-177f-45b3-9bda-7be82db8adbf",
								"exec": [
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// CONSOLE LOG REQUESTS - only for debugging purposes:\r",
									"\r",
									"console.log(\"Full response body (all orders): \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// ELEMENTS COLLECTION -> for checking the order (response body):\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const deletedOrder = pm.collectionVariables.get('orderId');\r",
									"\r",
									"const orderStillExists = response.some(order => order.id === deletedOrder);\r",
									"\r",
									"\r",
									"/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
									"// TESTS:\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.length.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid - orders contain all the required info\", function() {\r",
									"    const schema = {\r",
									"        type: \"array\",\r",
									"        items: {\r",
									"            $ref: \"#/definitions/MyObject\"\r",
									"        },\r",
									"        definitions: {\r",
									"            MyObject: {\r",
									"                type: \"object\",\r",
									"                required: [\"id\", \"toolId\", \"customerName\", \"quantity\", \"created\"],\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"string\"\r",
									"                    },\r",
									"                    toolId: {\r",
									"                        type: \"integer\"\r",
									"                    },\r",
									"                    customerName: {\r",
									"                        type: \"string\"\r",
									"                    },\r",
									"                    quantity: {\r",
									"                        type: \"integer\"\r",
									"                    },\r",
									"                    created: {\r",
									"                        type: \"string\"\r",
									"                    },\r",
									"                    comment: {\r",
									"                        type: \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"additionalProperties\": false\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct toolID property format\", function () {\r",
									"    response.forEach(item => {\r",
									"        pm.expect(item.toolId).to.be.a('number');\r",
									"        pm.expect(item.toolId.toString().length).to.equal(4);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"No duplicate order IDs\", function () {\r",
									"    const orderIDs = response.map(item => item.id);\r",
									"    const duplicates = orderIDs.filter((id, index) => orderIDs.indexOf(id) !== index);\r",
									"\r",
									"    if(duplicates.length > 0) {\r",
									"        console.log(\"Found order ID duplicates: \" + duplicates.join(\", \"))\r",
									"    };\r",
									"\r",
									"    pm.expect(duplicates).to.be.empty;    \r",
									"});\r",
									"\r",
									"pm.test('Order deleted successfully', function() {\r",
									"    pm.expect(orderStillExists).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdd5c522-0aea-4940-9f01-9191aa8a8f4d",
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c500a22e-b5c2-4b0b-ac0a-191cad52acb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/orders"
					},
					"response": [
						{
							"id": "a27d2f2e-d070-437c-9e44-8f665bf64ddf",
							"name": "Get all orders",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/orders"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "2202"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "etag",
									"value": "W/\"89a-iMnNzYBWU+slCgdEmTk027xDf5Q\""
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Mon, 16 Jun 2025 16:23:30 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510022-SOF, cache-sof1510022-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS, MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0, 0"
								},
								{
									"key": "X-Timer",
									"value": "S1750091010.981326,VS0,VE255"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "[\n    {\n        \"id\": \"5xSqWVAfE-VkyyALTBCAb\",\n        \"orderIdTest\": \"Place expected order ID above - to verify correct fail\",\n        \"toolId\": 4643,\n        \"customerName\": \"Ms. Warren Cole\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:35:30.349Z\",\n        \"comment\": \"Impedit aut cum.\"\n    },    \n    {\n        \"id\": \"pTJinSneFrJX0KmnDK6OX\",\n        \"toolId\": 464,\n        \"customerName\": \"Iris Kling\",\n        \n        \"created\": \"2025-06-16T13:34:32.529Z\",\n        \"comment\": \"Recusandae iure non aliquam velit.\"\n    },\n    {\n        \"id\": \"pTJinSneFrJX0KmnDK6OX\",\n        \"toolId\": 4643,\n        \"customerName\": \"Ms. Warren Cole\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:35:30.349Z\",\n        \"comment\": \"Impedit aut cum.\"\n    },\n    {\n        \"id\": \"jlwW5V_rfH3i0JujvypK6\",\n        \"toolId\": 4643,\n        \"customerName\": \"Maryann Prosacco\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:36:10.149Z\",\n        \"comment\": \"Qui blanditiis facere quia nesciunt deserunt.\"\n    },\n    {\n        \"id\": \"Xto4iCcTT8B0e3qpEDcBS\",\n        \"toolId\": 4643,\n        \"customerName\": \"Merle Graham\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:37:23.752Z\",\n        \"comment\": \"Explicabo ullam ea tempore et et odio ea id nisi.\"\n    },\n    {\n        \"id\": \"lcBDzAB69UczxoAvCdvxz\",\n        \"toolId\": 4643,\n        \"customerName\": \"Mrs. Rachel Murazik\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:38:48.615Z\",\n        \"comment\": \"Quis beatae qui voluptate facere dolor pariatur ipsam.\"\n    },\n    {\n        \"id\": \"5Wi8udHRarcBYRzBo2lZ8\",\n        \"toolId\": 4643,\n        \"customerName\": \"Willie Graham\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:39:40.036Z\",\n        \"comment\": \"Nihil velit tenetur rerum repudiandae molestiae.\"\n    },\n    {\n        \"id\": \"0C4g5gqnIBHs-meIvgL9K\",\n        \"toolId\": 4643,\n        \"customerName\": \"Suzanne Schiller\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:40:27.125Z\",\n        \"comment\": \"Magnam repudiandae eligendi commodi debitis quas rem natus.\"\n    },\n    {\n        \"id\": \"MXHvatO4jkwnoCZGMM-xn\",\n        \"toolId\": 4643,\n        \"customerName\": \"Irma Heathcote\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:40:42.258Z\",\n        \"comment\": \"Sit molestiae mollitia ut laudantium quo iste veniam cumque.\"\n    },\n    {\n        \"id\": \"QpylDk2MUxWAd1KP0Wz8S\",\n        \"toolId\": 4643,\n        \"customerName\": \"Tina Schumm\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:41:20.952Z\",\n        \"comment\": \"Temporibus rerum labore aliquid cupiditate aut mollitia asperiores distinctio et.\"\n    },\n    {\n        \"id\": \"1aWau3ZLI49wwSEDR48Zu\",\n        \"toolId\": 4643,\n        \"customerName\": \"Genevieve Bayer\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T13:42:32.264Z\",\n        \"comment\": \"Iste similique et.\"\n    },\n    {\n        \"id\": \"YchULUX3bim1mQvezWI_p\",\n        \"toolId\": 4643,\n        \"customerName\": \"Ricky Bailey\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T14:13:32.194Z\",\n        \"comment\": \"Voluptas et consequatur tempore.\"\n    },\n    {\n        \"id\": \"eT4cVVYCrk9OqLZemOLpV\",\n        \"toolId\": 4643,\n        \"customerName\": \"Matt Johns II\",\n        \"quantity\": 1,\n        \"created\": \"2025-06-16T14:15:28.236Z\",\n        \"comment\": \"Quam tempora earum tempora.\"\n    }\n]"
						}
					]
				}
			],
			"id": "2d295aac-d984-4298-871a-0a3ec14e3985",
			"auth": {
				"type": "apikey",
				"apikey": {
					"value": "{{accessToken}}",
					"key": "Authorization"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5912a0cd-b7d9-4135-94d3-b157ed89016b",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "24f0c7be-d955-4625-9ecb-0e2e83362517",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ec317ab0-1db1-4f5c-90ce-a722c03a7055",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8f125d81-afa6-4ae2-9f3e-87bfa44812d7",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Test for verifying if the response time is less than 600ms.\r",
					"pm.test(\"Response time is less than 600ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
					"});\r",
					"\r",
					"pm.test(\"Response body is JSON\", function (){\r",
					"    pm.response.to.be.json;\r",
					"});\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://simple-tool-rental-api.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "availableProductID",
			"value": "3674",
			"type": "default"
		},
		{
			"key": "customerName",
			"value": ""
		},
		{
			"key": "orderComment",
			"value": ""
		},
		{
			"key": "unavailableProductID",
			"value": "6543",
			"type": "default"
		}
	]
}